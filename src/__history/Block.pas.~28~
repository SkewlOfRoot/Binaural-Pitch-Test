unit Block;

interface
uses SysUtils;
  type
    TBlock = class

    private
      typeStr : string;
      startTimeInt : integer;
      endTimeInt : integer;
      durationInt : integer;
      detectedBool : boolean;

      function GetType() : string;
      procedure SetType(value : string);
      function GetStartTime() : integer;
      procedure SetStartTime(value : integer);
      function GetEndTime() : integer;
      procedure SetEndTime(value : integer);
      function GetDuration() : integer;
      procedure SetDuration(value : integer);
      function GetStartTimePres() : string;
      function GetEndTimePres() : string;
      function SecondsToTimeFormat(totalSec: Integer) : string;
      function GetDetected() : boolean;
      procedure SetDetected(value : boolean);
    public
      function IsWithinPlayZone(secsElapsed : integer) : boolean;
      function HasDetectionFailed(secsElapsed : integer) : boolean;
      property BlockType : string read GetType write SetType;
      property StartTime : integer read GetStartTime write SetStartTime;
      property StartTimePres : string read GetStartTimePres;
      property EndTime : integer read GetEndTime write SetEndTime;
      property EndTimePres : string read GetEndTimePres;
      property Duration : integer read GetDuration write SetDuration;
      property Detected : boolean read GetDetected write SetDetected;

    end;

implementation

  function TBlock.GetType : string;
  begin
    Result := typeStr;
  end;

  procedure TBlock.SetType(value: string);
  begin
    typeStr := value;
  end;

  function TBlock.GetStartTime : integer;
  begin
    Result := startTimeInt;
  end;

  procedure TBlock.SetStartTime(value: integer);
  begin
    startTimeInt := value;
  end;

  function TBlock.GetDuration;
  begin
    Result := durationInt;
  end;

  procedure TBlock.SetDuration(value: Integer);
  begin
    durationInt := value;
  end;

  function TBlock.GetEndTime;
  begin
    Result := endTimeInt;
  end;

  procedure TBlock.SetEndTime(value: Integer);
  begin
    endTimeInt := value;
  end;

  function TBlock.GetStartTimePres;
  begin
    Result := SecondsToTimeFormat(startTimeInt);
  end;

  function TBlock.GetEndTimePres;
  begin
    Result := SecondsToTimeFormat(endTimeInt);
  end;

  function TBlock.SecondsToTimeFormat(totalSec: Integer) : string;
    var h,m,s : integer;
    var hh, mm, ss : string;
  begin
    h := totalSec div 3600;
    m := totalSec div 60 - h*60;
    s := totalSec - (h*3600 + m*60);

    //hh := IntToStr(h);
    mm := IntToStr(m);
    ss := IntToStr(s);
  {
    if (h >= 0)and(h<10) then
      hh := '0'+hh;
   }
    if (m >= 0)and(m<10) then
      mm := '0'+mm;

    if (s >= 0)and(s<10) then
      ss := '0'+ss;

    Result := mm+':'+ss;
  end;

  function TBlock.IsWithinPlayZone(secsElapsed : integer) : boolean;
    var isWithin : boolean;
  begin
    isWithin := false;
    if (secsElapsed >= startTimeInt)and(secsElapsed <= (startTimeInt+durationInt)) then
      isWithin := true;
    Result := isWithin;
  end;

  function TBlock.HasDetectionFailed(secsElapsed: Integer) : boolean;
    var hasFailed : boolean;
  begin
    hasFailed := false;
    if (secsElapsed >= startTimeInt+durationInt) and not detectedBool then
      hasFailed := true;
    Result := hasFailed;
  end;

  function TBlock.GetDetected;
  begin
    Result := detectedBool;
  end;

  procedure TBlock.SetDetected(value: Boolean);
  begin
    detectedBool := value;
  end;
end.
